// Code generated by github.com/tinylib/msgp DO NOT EDIT.

package cmd

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *RStat) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Count":
			z.Count, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "Bytes":
			z.Bytes, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Bytes")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RStat) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Count"
	err = en.Append(0x82, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	// write "Bytes"
	err = en.Append(0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Bytes)
	if err != nil {
		err = msgp.WrapError(err, "Bytes")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RStat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Count"
	o = append(o, 0x82, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.Count)
	// string "Bytes"
	o = append(o, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Bytes)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RStat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Count":
			z.Count, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "Bytes":
			z.Bytes, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bytes")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RStat) Msgsize() (s int) {
	s = 1 + 6 + msgp.Int64Size + 6 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RTimedMetrics) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LastHour":
			err = z.LastHour.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LastHour")
				return
			}
		case "SinceUptime":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "SinceUptime")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "SinceUptime")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Count":
					z.SinceUptime.Count, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "SinceUptime", "Count")
						return
					}
				case "Bytes":
					z.SinceUptime.Bytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "SinceUptime", "Bytes")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "SinceUptime")
						return
					}
				}
			}
		case "LastMinute":
			err = z.LastMinute.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LastMinute")
				return
			}
		case "ErrCounts":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ErrCounts")
				return
			}
			if z.ErrCounts == nil {
				z.ErrCounts = make(map[string]int, zb0003)
			} else if len(z.ErrCounts) > 0 {
				clear(z.ErrCounts)
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ErrCounts")
					return
				}
				var za0002 int
				za0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "ErrCounts", za0001)
					return
				}
				z.ErrCounts[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RTimedMetrics) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "LastHour"
	err = en.Append(0x84, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72)
	if err != nil {
		return
	}
	err = z.LastHour.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LastHour")
		return
	}
	// write "SinceUptime"
	err = en.Append(0xab, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Count"
	err = en.Append(0x82, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SinceUptime.Count)
	if err != nil {
		err = msgp.WrapError(err, "SinceUptime", "Count")
		return
	}
	// write "Bytes"
	err = en.Append(0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SinceUptime.Bytes)
	if err != nil {
		err = msgp.WrapError(err, "SinceUptime", "Bytes")
		return
	}
	// write "LastMinute"
	err = en.Append(0xaa, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65)
	if err != nil {
		return
	}
	err = z.LastMinute.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LastMinute")
		return
	}
	// write "ErrCounts"
	err = en.Append(0xa9, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ErrCounts)))
	if err != nil {
		err = msgp.WrapError(err, "ErrCounts")
		return
	}
	for za0001, za0002 := range z.ErrCounts {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "ErrCounts")
			return
		}
		err = en.WriteInt(za0002)
		if err != nil {
			err = msgp.WrapError(err, "ErrCounts", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RTimedMetrics) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "LastHour"
	o = append(o, 0x84, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72)
	o, err = z.LastHour.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastHour")
		return
	}
	// string "SinceUptime"
	o = append(o, 0xab, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65)
	// map header, size 2
	// string "Count"
	o = append(o, 0x82, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.SinceUptime.Count)
	// string "Bytes"
	o = append(o, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.SinceUptime.Bytes)
	// string "LastMinute"
	o = append(o, 0xaa, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65)
	o, err = z.LastMinute.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastMinute")
		return
	}
	// string "ErrCounts"
	o = append(o, 0xa9, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.ErrCounts)))
	for za0001, za0002 := range z.ErrCounts {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendInt(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RTimedMetrics) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LastHour":
			bts, err = z.LastHour.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastHour")
				return
			}
		case "SinceUptime":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SinceUptime")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "SinceUptime")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Count":
					z.SinceUptime.Count, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "SinceUptime", "Count")
						return
					}
				case "Bytes":
					z.SinceUptime.Bytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "SinceUptime", "Bytes")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "SinceUptime")
						return
					}
				}
			}
		case "LastMinute":
			bts, err = z.LastMinute.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastMinute")
				return
			}
		case "ErrCounts":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ErrCounts")
				return
			}
			if z.ErrCounts == nil {
				z.ErrCounts = make(map[string]int, zb0003)
			} else if len(z.ErrCounts) > 0 {
				clear(z.ErrCounts)
			}
			for zb0003 > 0 {
				var za0002 int
				zb0003--
				var za0001 string
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ErrCounts")
					return
				}
				za0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ErrCounts", za0001)
					return
				}
				z.ErrCounts[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RTimedMetrics) Msgsize() (s int) {
	s = 1 + 9 + z.LastHour.Msgsize() + 12 + 1 + 6 + msgp.Int64Size + 6 + msgp.Int64Size + 11 + z.LastMinute.Msgsize() + 10 + msgp.MapHeaderSize
	if z.ErrCounts != nil {
		for za0001, za0002 := range z.ErrCounts {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.IntSize
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SRMetric) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DeploymentID":
			z.DeploymentID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
		case "Endpoint":
			z.Endpoint, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Endpoint")
				return
			}
		case "TotalDowntime":
			z.TotalDowntime, err = dc.ReadDuration()
			if err != nil {
				err = msgp.WrapError(err, "TotalDowntime")
				return
			}
		case "LastOnline":
			z.LastOnline, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "LastOnline")
				return
			}
		case "Online":
			z.Online, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Online")
				return
			}
		case "Latency":
			err = z.Latency.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Latency")
				return
			}
		case "ReplicatedSize":
			z.ReplicatedSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReplicatedSize")
				return
			}
		case "ReplicatedCount":
			z.ReplicatedCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReplicatedCount")
				return
			}
		case "Failed":
			err = z.Failed.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Failed")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SRMetric) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "DeploymentID"
	err = en.Append(0x89, 0xac, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.DeploymentID)
	if err != nil {
		err = msgp.WrapError(err, "DeploymentID")
		return
	}
	// write "Endpoint"
	err = en.Append(0xa8, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Endpoint)
	if err != nil {
		err = msgp.WrapError(err, "Endpoint")
		return
	}
	// write "TotalDowntime"
	err = en.Append(0xad, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteDuration(z.TotalDowntime)
	if err != nil {
		err = msgp.WrapError(err, "TotalDowntime")
		return
	}
	// write "LastOnline"
	err = en.Append(0xaa, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.LastOnline)
	if err != nil {
		err = msgp.WrapError(err, "LastOnline")
		return
	}
	// write "Online"
	err = en.Append(0xa6, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Online)
	if err != nil {
		err = msgp.WrapError(err, "Online")
		return
	}
	// write "Latency"
	err = en.Append(0xa7, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	err = z.Latency.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Latency")
		return
	}
	// write "ReplicatedSize"
	err = en.Append(0xae, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReplicatedSize)
	if err != nil {
		err = msgp.WrapError(err, "ReplicatedSize")
		return
	}
	// write "ReplicatedCount"
	err = en.Append(0xaf, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReplicatedCount)
	if err != nil {
		err = msgp.WrapError(err, "ReplicatedCount")
		return
	}
	// write "Failed"
	err = en.Append(0xa6, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Failed.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Failed")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SRMetric) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "DeploymentID"
	o = append(o, 0x89, 0xac, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44)
	o = msgp.AppendString(o, z.DeploymentID)
	// string "Endpoint"
	o = append(o, 0xa8, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Endpoint)
	// string "TotalDowntime"
	o = append(o, 0xad, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendDuration(o, z.TotalDowntime)
	// string "LastOnline"
	o = append(o, 0xaa, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendTime(o, z.LastOnline)
	// string "Online"
	o = append(o, 0xa6, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendBool(o, z.Online)
	// string "Latency"
	o = append(o, 0xa7, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79)
	o, err = z.Latency.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Latency")
		return
	}
	// string "ReplicatedSize"
	o = append(o, 0xae, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.ReplicatedSize)
	// string "ReplicatedCount"
	o = append(o, 0xaf, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.ReplicatedCount)
	// string "Failed"
	o = append(o, 0xa6, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64)
	o, err = z.Failed.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Failed")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SRMetric) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DeploymentID":
			z.DeploymentID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
		case "Endpoint":
			z.Endpoint, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Endpoint")
				return
			}
		case "TotalDowntime":
			z.TotalDowntime, bts, err = msgp.ReadDurationBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalDowntime")
				return
			}
		case "LastOnline":
			z.LastOnline, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastOnline")
				return
			}
		case "Online":
			z.Online, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Online")
				return
			}
		case "Latency":
			bts, err = z.Latency.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latency")
				return
			}
		case "ReplicatedSize":
			z.ReplicatedSize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplicatedSize")
				return
			}
		case "ReplicatedCount":
			z.ReplicatedCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplicatedCount")
				return
			}
		case "Failed":
			bts, err = z.Failed.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Failed")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SRMetric) Msgsize() (s int) {
	s = 1 + 13 + msgp.StringPrefixSize + len(z.DeploymentID) + 9 + msgp.StringPrefixSize + len(z.Endpoint) + 14 + msgp.DurationSize + 11 + msgp.TimeSize + 7 + msgp.BoolSize + 8 + z.Latency.Msgsize() + 15 + msgp.Int64Size + 16 + msgp.Int64Size + 7 + z.Failed.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SRMetricsSummary) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ActiveWorkers":
			err = z.ActiveWorkers.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ActiveWorkers")
				return
			}
		case "ReplicaSize":
			z.ReplicaSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReplicaSize")
				return
			}
		case "ReplicaCount":
			z.ReplicaCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReplicaCount")
				return
			}
		case "Queued":
			err = z.Queued.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Queued")
				return
			}
		case "Proxied":
			err = z.Proxied.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Proxied")
				return
			}
		case "Metrics":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Metrics")
				return
			}
			if z.Metrics == nil {
				z.Metrics = make(map[string]SRMetric, zb0002)
			} else if len(z.Metrics) > 0 {
				clear(z.Metrics)
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Metrics")
					return
				}
				var za0002 SRMetric
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Metrics", za0001)
					return
				}
				z.Metrics[za0001] = za0002
			}
		case "Uptime":
			z.Uptime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Uptime")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SRMetricsSummary) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "ActiveWorkers"
	err = en.Append(0x87, 0xad, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = z.ActiveWorkers.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ActiveWorkers")
		return
	}
	// write "ReplicaSize"
	err = en.Append(0xab, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReplicaSize)
	if err != nil {
		err = msgp.WrapError(err, "ReplicaSize")
		return
	}
	// write "ReplicaCount"
	err = en.Append(0xac, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReplicaCount)
	if err != nil {
		err = msgp.WrapError(err, "ReplicaCount")
		return
	}
	// write "Queued"
	err = en.Append(0xa6, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Queued.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Queued")
		return
	}
	// write "Proxied"
	err = en.Append(0xa7, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Proxied.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Proxied")
		return
	}
	// write "Metrics"
	err = en.Append(0xa7, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Metrics)))
	if err != nil {
		err = msgp.WrapError(err, "Metrics")
		return
	}
	for za0001, za0002 := range z.Metrics {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Metrics")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Metrics", za0001)
			return
		}
	}
	// write "Uptime"
	err = en.Append(0xa6, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Uptime)
	if err != nil {
		err = msgp.WrapError(err, "Uptime")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SRMetricsSummary) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "ActiveWorkers"
	o = append(o, 0x87, 0xad, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73)
	o, err = z.ActiveWorkers.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ActiveWorkers")
		return
	}
	// string "ReplicaSize"
	o = append(o, 0xab, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.ReplicaSize)
	// string "ReplicaCount"
	o = append(o, 0xac, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.ReplicaCount)
	// string "Queued"
	o = append(o, 0xa6, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64)
	o, err = z.Queued.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Queued")
		return
	}
	// string "Proxied"
	o = append(o, 0xa7, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64)
	o, err = z.Proxied.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Proxied")
		return
	}
	// string "Metrics"
	o = append(o, 0xa7, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Metrics)))
	for za0001, za0002 := range z.Metrics {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Metrics", za0001)
			return
		}
	}
	// string "Uptime"
	o = append(o, 0xa6, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.Uptime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SRMetricsSummary) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ActiveWorkers":
			bts, err = z.ActiveWorkers.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActiveWorkers")
				return
			}
		case "ReplicaSize":
			z.ReplicaSize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplicaSize")
				return
			}
		case "ReplicaCount":
			z.ReplicaCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplicaCount")
				return
			}
		case "Queued":
			bts, err = z.Queued.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Queued")
				return
			}
		case "Proxied":
			bts, err = z.Proxied.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Proxied")
				return
			}
		case "Metrics":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Metrics")
				return
			}
			if z.Metrics == nil {
				z.Metrics = make(map[string]SRMetric, zb0002)
			} else if len(z.Metrics) > 0 {
				clear(z.Metrics)
			}
			for zb0002 > 0 {
				var za0002 SRMetric
				zb0002--
				var za0001 string
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metrics")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metrics", za0001)
					return
				}
				z.Metrics[za0001] = za0002
			}
		case "Uptime":
			z.Uptime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uptime")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SRMetricsSummary) Msgsize() (s int) {
	s = 1 + 14 + z.ActiveWorkers.Msgsize() + 12 + msgp.Int64Size + 13 + msgp.Int64Size + 7 + z.Queued.Msgsize() + 8 + z.Proxied.Msgsize() + 8 + msgp.MapHeaderSize
	if z.Metrics != nil {
		for za0001, za0002 := range z.Metrics {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += 7 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SRStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ReplicaSize":
			z.ReplicaSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReplicaSize")
				return
			}
		case "ReplicaCount":
			z.ReplicaCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReplicaCount")
				return
			}
		case "M":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
			if z.M == nil {
				z.M = make(map[string]*SRStatus, zb0002)
			} else if len(z.M) > 0 {
				clear(z.M)
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				var za0002 *SRStatus
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "M", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(SRStatus)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "M", za0001)
						return
					}
				}
				z.M[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SRStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ReplicaSize"
	err = en.Append(0x83, 0xab, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReplicaSize)
	if err != nil {
		err = msgp.WrapError(err, "ReplicaSize")
		return
	}
	// write "ReplicaCount"
	err = en.Append(0xac, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReplicaCount)
	if err != nil {
		err = msgp.WrapError(err, "ReplicaCount")
		return
	}
	// write "M"
	err = en.Append(0xa1, 0x4d)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.M)))
	if err != nil {
		err = msgp.WrapError(err, "M")
		return
	}
	for za0001, za0002 := range z.M {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "M")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "M", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SRStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ReplicaSize"
	o = append(o, 0x83, 0xab, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.ReplicaSize)
	// string "ReplicaCount"
	o = append(o, 0xac, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.ReplicaCount)
	// string "M"
	o = append(o, 0xa1, 0x4d)
	o = msgp.AppendMapHeader(o, uint32(len(z.M)))
	for za0001, za0002 := range z.M {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "M", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SRStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ReplicaSize":
			z.ReplicaSize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplicaSize")
				return
			}
		case "ReplicaCount":
			z.ReplicaCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplicaCount")
				return
			}
		case "M":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
			if z.M == nil {
				z.M = make(map[string]*SRStatus, zb0002)
			} else if len(z.M) > 0 {
				clear(z.M)
			}
			for zb0002 > 0 {
				var za0002 *SRStatus
				zb0002--
				var za0001 string
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(SRStatus)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "M", za0001)
						return
					}
				}
				z.M[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SRStats) Msgsize() (s int) {
	s = 1 + 12 + msgp.Int64Size + 13 + msgp.Int64Size + 2 + msgp.MapHeaderSize
	if z.M != nil {
		for za0001, za0002 := range z.M {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SRStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ReplicatedSize":
			z.ReplicatedSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReplicatedSize")
				return
			}
		case "Failed":
			err = z.Failed.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Failed")
				return
			}
		case "ReplicatedCount":
			z.ReplicatedCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReplicatedCount")
				return
			}
		case "Latency":
			err = z.Latency.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Latency")
				return
			}
		case "lt":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XferRateLrg")
					return
				}
				z.XferRateLrg = nil
			} else {
				if z.XferRateLrg == nil {
					z.XferRateLrg = new(XferStats)
				}
				err = z.XferRateLrg.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "XferRateLrg")
					return
				}
			}
		case "st":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XferRateSml")
					return
				}
				z.XferRateSml = nil
			} else {
				if z.XferRateSml == nil {
					z.XferRateSml = new(XferStats)
				}
				err = z.XferRateSml.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "XferRateSml")
					return
				}
			}
		case "Endpoint":
			z.Endpoint, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Endpoint")
				return
			}
		case "Secure":
			z.Secure, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Secure")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SRStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "ReplicatedSize"
	err = en.Append(0x88, 0xae, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReplicatedSize)
	if err != nil {
		err = msgp.WrapError(err, "ReplicatedSize")
		return
	}
	// write "Failed"
	err = en.Append(0xa6, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Failed.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Failed")
		return
	}
	// write "ReplicatedCount"
	err = en.Append(0xaf, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReplicatedCount)
	if err != nil {
		err = msgp.WrapError(err, "ReplicatedCount")
		return
	}
	// write "Latency"
	err = en.Append(0xa7, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	err = z.Latency.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Latency")
		return
	}
	// write "lt"
	err = en.Append(0xa2, 0x6c, 0x74)
	if err != nil {
		return
	}
	if z.XferRateLrg == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.XferRateLrg.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "XferRateLrg")
			return
		}
	}
	// write "st"
	err = en.Append(0xa2, 0x73, 0x74)
	if err != nil {
		return
	}
	if z.XferRateSml == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.XferRateSml.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "XferRateSml")
			return
		}
	}
	// write "Endpoint"
	err = en.Append(0xa8, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Endpoint)
	if err != nil {
		err = msgp.WrapError(err, "Endpoint")
		return
	}
	// write "Secure"
	err = en.Append(0xa6, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Secure)
	if err != nil {
		err = msgp.WrapError(err, "Secure")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SRStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "ReplicatedSize"
	o = append(o, 0x88, 0xae, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.ReplicatedSize)
	// string "Failed"
	o = append(o, 0xa6, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64)
	o, err = z.Failed.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Failed")
		return
	}
	// string "ReplicatedCount"
	o = append(o, 0xaf, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.ReplicatedCount)
	// string "Latency"
	o = append(o, 0xa7, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79)
	o, err = z.Latency.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Latency")
		return
	}
	// string "lt"
	o = append(o, 0xa2, 0x6c, 0x74)
	if z.XferRateLrg == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.XferRateLrg.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "XferRateLrg")
			return
		}
	}
	// string "st"
	o = append(o, 0xa2, 0x73, 0x74)
	if z.XferRateSml == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.XferRateSml.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "XferRateSml")
			return
		}
	}
	// string "Endpoint"
	o = append(o, 0xa8, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Endpoint)
	// string "Secure"
	o = append(o, 0xa6, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65)
	o = msgp.AppendBool(o, z.Secure)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SRStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ReplicatedSize":
			z.ReplicatedSize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplicatedSize")
				return
			}
		case "Failed":
			bts, err = z.Failed.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Failed")
				return
			}
		case "ReplicatedCount":
			z.ReplicatedCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplicatedCount")
				return
			}
		case "Latency":
			bts, err = z.Latency.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latency")
				return
			}
		case "lt":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XferRateLrg = nil
			} else {
				if z.XferRateLrg == nil {
					z.XferRateLrg = new(XferStats)
				}
				bts, err = z.XferRateLrg.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "XferRateLrg")
					return
				}
			}
		case "st":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XferRateSml = nil
			} else {
				if z.XferRateSml == nil {
					z.XferRateSml = new(XferStats)
				}
				bts, err = z.XferRateSml.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "XferRateSml")
					return
				}
			}
		case "Endpoint":
			z.Endpoint, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Endpoint")
				return
			}
		case "Secure":
			z.Secure, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Secure")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SRStatus) Msgsize() (s int) {
	s = 1 + 15 + msgp.Int64Size + 7 + z.Failed.Msgsize() + 16 + msgp.Int64Size + 8 + z.Latency.Msgsize() + 3
	if z.XferRateLrg == nil {
		s += msgp.NilSize
	} else {
		s += z.XferRateLrg.Msgsize()
	}
	s += 3
	if z.XferRateSml == nil {
		s += msgp.NilSize
	} else {
		s += z.XferRateSml.Msgsize()
	}
	s += 9 + msgp.StringPrefixSize + len(z.Endpoint) + 7 + msgp.BoolSize
	return
}
