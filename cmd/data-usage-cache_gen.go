package cmd

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *allTierStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ts":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tiers")
				return
			}
			if z.Tiers == nil {
				z.Tiers = make(map[string]tierStats, zb0002)
			} else if len(z.Tiers) > 0 {
				for key := range z.Tiers {
					delete(z.Tiers, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 tierStats
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tiers")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Tiers", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Tiers", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "ts":
						za0002.TotalSize, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Tiers", za0001, "TotalSize")
							return
						}
					case "nv":
						za0002.NumVersions, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Tiers", za0001, "NumVersions")
							return
						}
					case "no":
						za0002.NumObjects, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Tiers", za0001, "NumObjects")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Tiers", za0001)
							return
						}
					}
				}
				z.Tiers[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *allTierStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ts"
	err = en.Append(0x81, 0xa2, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Tiers)))
	if err != nil {
		err = msgp.WrapError(err, "Tiers")
		return
	}
	for za0001, za0002 := range z.Tiers {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Tiers")
			return
		}
		// map header, size 3
		// write "ts"
		err = en.Append(0x83, 0xa2, 0x74, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint64(za0002.TotalSize)
		if err != nil {
			err = msgp.WrapError(err, "Tiers", za0001, "TotalSize")
			return
		}
		// write "nv"
		err = en.Append(0xa2, 0x6e, 0x76)
		if err != nil {
			return
		}
		err = en.WriteInt(za0002.NumVersions)
		if err != nil {
			err = msgp.WrapError(err, "Tiers", za0001, "NumVersions")
			return
		}
		// write "no"
		err = en.Append(0xa2, 0x6e, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteInt(za0002.NumObjects)
		if err != nil {
			err = msgp.WrapError(err, "Tiers", za0001, "NumObjects")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *allTierStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ts"
	o = append(o, 0x81, 0xa2, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Tiers)))
	for za0001, za0002 := range z.Tiers {
		o = msgp.AppendString(o, za0001)
		// map header, size 3
		// string "ts"
		o = append(o, 0x83, 0xa2, 0x74, 0x73)
		o = msgp.AppendUint64(o, za0002.TotalSize)
		// string "nv"
		o = append(o, 0xa2, 0x6e, 0x76)
		o = msgp.AppendInt(o, za0002.NumVersions)
		// string "no"
		o = append(o, 0xa2, 0x6e, 0x6f)
		o = msgp.AppendInt(o, za0002.NumObjects)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *allTierStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ts":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tiers")
				return
			}
			if z.Tiers == nil {
				z.Tiers = make(map[string]tierStats, zb0002)
			} else if len(z.Tiers) > 0 {
				for key := range z.Tiers {
					delete(z.Tiers, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 tierStats
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tiers")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tiers", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Tiers", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "ts":
						za0002.TotalSize, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Tiers", za0001, "TotalSize")
							return
						}
					case "nv":
						za0002.NumVersions, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Tiers", za0001, "NumVersions")
							return
						}
					case "no":
						za0002.NumObjects, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Tiers", za0001, "NumObjects")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Tiers", za0001)
							return
						}
					}
				}
				z.Tiers[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *allTierStats) Msgsize() (s int) {
	s = 1 + 3 + msgp.MapHeaderSize
	if z.Tiers != nil {
		for za0001, za0002 := range z.Tiers {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + 1 + 3 + msgp.Uint64Size + 3 + msgp.IntSize + 3 + msgp.IntSize
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *currentScannerCycle) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "current"
	o = append(o, 0x84, 0xa7, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.current)
	// string "next"
	o = append(o, 0xa4, 0x6e, 0x65, 0x78, 0x74)
	o = msgp.AppendUint64(o, z.next)
	// string "started"
	o = append(o, 0xa7, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64)
	o = msgp.AppendTime(o, z.started)
	// string "cycleCompleted"
	o = append(o, 0xae, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.cycleCompleted)))
	for za0001 := range z.cycleCompleted {
		o = msgp.AppendTime(o, z.cycleCompleted[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *currentScannerCycle) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "current":
			z.current, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "current")
				return
			}
		case "next":
			z.next, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "next")
				return
			}
		case "started":
			z.started, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "started")
				return
			}
		case "cycleCompleted":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "cycleCompleted")
				return
			}
			if cap(z.cycleCompleted) >= int(zb0002) {
				z.cycleCompleted = (z.cycleCompleted)[:zb0002]
			} else {
				z.cycleCompleted = make([]time.Time, zb0002)
			}
			for za0001 := range z.cycleCompleted {
				z.cycleCompleted[za0001], bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "cycleCompleted", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *currentScannerCycle) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint64Size + 5 + msgp.Uint64Size + 8 + msgp.TimeSize + 15 + msgp.ArrayHeaderSize + (len(z.cycleCompleted) * (msgp.TimeSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageCache) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			err = z.Info.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntry, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 dataUsageEntry
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *dataUsageCache) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Info"
	err = en.Append(0x82, 0xa4, 0x49, 0x6e, 0x66, 0x6f)
	if err != nil {
		return
	}
	err = z.Info.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Info")
		return
	}
	// write "Cache"
	err = en.Append(0xa5, 0x43, 0x61, 0x63, 0x68, 0x65)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Cache)))
	if err != nil {
		err = msgp.WrapError(err, "Cache")
		return
	}
	for za0001, za0002 := range z.Cache {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Cache")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Cache", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *dataUsageCache) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Info"
	o = append(o, 0x82, 0xa4, 0x49, 0x6e, 0x66, 0x6f)
	o, err = z.Info.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Info")
		return
	}
	// string "Cache"
	o = append(o, 0xa5, 0x43, 0x61, 0x63, 0x68, 0x65)
	o = msgp.AppendMapHeader(o, uint32(len(z.Cache)))
	for za0001, za0002 := range z.Cache {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Cache", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageCache) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			bts, err = z.Info.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntry, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 dataUsageEntry
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageCache) Msgsize() (s int) {
	s = 1 + 5 + z.Info.Msgsize() + 6 + msgp.MapHeaderSize
	if z.Cache != nil {
		for za0001, za0002 := range z.Cache {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageCacheInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "NextCycle":
			z.NextCycle, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "NextCycle")
				return
			}
		case "LastUpdate":
			z.LastUpdate, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "LastUpdate")
				return
			}
		case "SkipHealing":
			z.SkipHealing, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "SkipHealing")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *dataUsageCacheInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Name"
	err = en.Append(0x84, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "NextCycle"
	err = en.Append(0xa9, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.NextCycle)
	if err != nil {
		err = msgp.WrapError(err, "NextCycle")
		return
	}
	// write "LastUpdate"
	err = en.Append(0xaa, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.LastUpdate)
	if err != nil {
		err = msgp.WrapError(err, "LastUpdate")
		return
	}
	// write "SkipHealing"
	err = en.Append(0xab, 0x53, 0x6b, 0x69, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBool(z.SkipHealing)
	if err != nil {
		err = msgp.WrapError(err, "SkipHealing")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *dataUsageCacheInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Name"
	o = append(o, 0x84, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "NextCycle"
	o = append(o, 0xa9, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65)
	o = msgp.AppendUint32(o, z.NextCycle)
	// string "LastUpdate"
	o = append(o, 0xaa, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	o = msgp.AppendTime(o, z.LastUpdate)
	// string "SkipHealing"
	o = append(o, 0xab, 0x53, 0x6b, 0x69, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67)
	o = msgp.AppendBool(o, z.SkipHealing)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageCacheInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "NextCycle":
			z.NextCycle, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextCycle")
				return
			}
		case "LastUpdate":
			z.LastUpdate, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastUpdate")
				return
			}
		case "SkipHealing":
			z.SkipHealing, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SkipHealing")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageCacheInfo) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 10 + msgp.Uint32Size + 11 + msgp.TimeSize + 12 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageCacheV2) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			err = z.Info.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV2, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 dataUsageEntryV2
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageCacheV2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			bts, err = z.Info.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV2, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 dataUsageEntryV2
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageCacheV2) Msgsize() (s int) {
	s = 1 + 5 + z.Info.Msgsize() + 6 + msgp.MapHeaderSize
	if z.Cache != nil {
		for za0001, za0002 := range z.Cache {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageCacheV3) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			err = z.Info.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV3, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 dataUsageEntryV3
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageCacheV3) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			bts, err = z.Info.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV3, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 dataUsageEntryV3
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageCacheV3) Msgsize() (s int) {
	s = 1 + 5 + z.Info.Msgsize() + 6 + msgp.MapHeaderSize
	if z.Cache != nil {
		for za0001, za0002 := range z.Cache {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageCacheV4) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			err = z.Info.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV4, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 dataUsageEntryV4
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageCacheV4) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			bts, err = z.Info.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV4, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 dataUsageEntryV4
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageCacheV4) Msgsize() (s int) {
	s = 1 + 5 + z.Info.Msgsize() + 6 + msgp.MapHeaderSize
	if z.Cache != nil {
		for za0001, za0002 := range z.Cache {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageCacheV5) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			err = z.Info.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV5, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 dataUsageEntryV5
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageCacheV5) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			bts, err = z.Info.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV5, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 dataUsageEntryV5
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageCacheV5) Msgsize() (s int) {
	s = 1 + 5 + z.Info.Msgsize() + 6 + msgp.MapHeaderSize
	if z.Cache != nil {
		for za0001, za0002 := range z.Cache {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageCacheV6) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			err = z.Info.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV6, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 dataUsageEntryV6
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageCacheV6) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			bts, err = z.Info.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV6, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 dataUsageEntryV6
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageCacheV6) Msgsize() (s int) {
	s = 1 + 5 + z.Info.Msgsize() + 6 + msgp.MapHeaderSize
	if z.Cache != nil {
		for za0001, za0002 := range z.Cache {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageCacheV7) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			err = z.Info.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV7, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 dataUsageEntryV7
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageCacheV7) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Info":
			bts, err = z.Info.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
		case "Cache":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cache")
				return
			}
			if z.Cache == nil {
				z.Cache = make(map[string]dataUsageEntryV7, zb0002)
			} else if len(z.Cache) > 0 {
				for key := range z.Cache {
					delete(z.Cache, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 dataUsageEntryV7
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache", za0001)
					return
				}
				z.Cache[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageCacheV7) Msgsize() (s int) {
	s = 1 + 5 + z.Info.Msgsize() + 6 + msgp.MapHeaderSize
	if z.Cache != nil {
		for za0001, za0002 := range z.Cache {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ch":
			err = z.Children.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
		case "sz":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "os":
			z.Objects, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
		case "vs":
			z.Versions, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Versions")
				return
			}
		case "dms":
			z.DeleteMarkers, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkers")
				return
			}
		case "szs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ObjSizes")
				return
			}
			if zb0002 != uint32(dataUsageBucketLen) {
				err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
				return
			}
			for za0001 := range z.ObjSizes {
				z.ObjSizes[za0001], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "ObjSizes", za0001)
					return
				}
			}
		case "vh":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ObjVersions")
				return
			}
			if zb0003 != uint32(dataUsageVersionLen) {
				err = msgp.ArrayError{Wanted: uint32(dataUsageVersionLen), Got: zb0003}
				return
			}
			for za0002 := range z.ObjVersions {
				z.ObjVersions[za0002], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "ObjVersions", za0002)
					return
				}
			}
		case "ats":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AllTierStats")
					return
				}
				z.AllTierStats = nil
			} else {
				if z.AllTierStats == nil {
					z.AllTierStats = new(allTierStats)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "AllTierStats")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "AllTierStats")
						return
					}
					switch msgp.UnsafeString(field) {
					case "ts":
						var zb0005 uint32
						zb0005, err = dc.ReadMapHeader()
						if err != nil {
							err = msgp.WrapError(err, "AllTierStats", "Tiers")
							return
						}
						if z.AllTierStats.Tiers == nil {
							z.AllTierStats.Tiers = make(map[string]tierStats, zb0005)
						} else if len(z.AllTierStats.Tiers) > 0 {
							for key := range z.AllTierStats.Tiers {
								delete(z.AllTierStats.Tiers, key)
							}
						}
						for zb0005 > 0 {
							zb0005--
							var za0003 string
							var za0004 tierStats
							za0003, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "AllTierStats", "Tiers")
								return
							}
							var zb0006 uint32
							zb0006, err = dc.ReadMapHeader()
							if err != nil {
								err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
								return
							}
							for zb0006 > 0 {
								zb0006--
								field, err = dc.ReadMapKeyPtr()
								if err != nil {
									err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
									return
								}
								switch msgp.UnsafeString(field) {
								case "ts":
									za0004.TotalSize, err = dc.ReadUint64()
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "TotalSize")
										return
									}
								case "nv":
									za0004.NumVersions, err = dc.ReadInt()
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumVersions")
										return
									}
								case "no":
									za0004.NumObjects, err = dc.ReadInt()
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumObjects")
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
										return
									}
								}
							}
							z.AllTierStats.Tiers[za0003] = za0004
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "AllTierStats")
							return
						}
					}
				}
			}
			zb0001Mask |= 0x1
		case "c":
			z.Compacted, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Compacted")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if (zb0001Mask & 0x1) == 0 {
		z.AllTierStats = nil
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z *dataUsageEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(9)
	var zb0001Mask uint16 /* 9 bits */
	_ = zb0001Mask
	if z.AllTierStats == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "ch"
		err = en.Append(0xa2, 0x63, 0x68)
		if err != nil {
			return
		}
		err = z.Children.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Children")
			return
		}
		// write "sz"
		err = en.Append(0xa2, 0x73, 0x7a)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Size)
		if err != nil {
			err = msgp.WrapError(err, "Size")
			return
		}
		// write "os"
		err = en.Append(0xa2, 0x6f, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Objects)
		if err != nil {
			err = msgp.WrapError(err, "Objects")
			return
		}
		// write "vs"
		err = en.Append(0xa2, 0x76, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Versions)
		if err != nil {
			err = msgp.WrapError(err, "Versions")
			return
		}
		// write "dms"
		err = en.Append(0xa3, 0x64, 0x6d, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.DeleteMarkers)
		if err != nil {
			err = msgp.WrapError(err, "DeleteMarkers")
			return
		}
		// write "szs"
		err = en.Append(0xa3, 0x73, 0x7a, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(dataUsageBucketLen))
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes")
			return
		}
		for za0001 := range z.ObjSizes {
			err = en.WriteUint64(z.ObjSizes[za0001])
			if err != nil {
				err = msgp.WrapError(err, "ObjSizes", za0001)
				return
			}
		}
		// write "vh"
		err = en.Append(0xa2, 0x76, 0x68)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(dataUsageVersionLen))
		if err != nil {
			err = msgp.WrapError(err, "ObjVersions")
			return
		}
		for za0002 := range z.ObjVersions {
			err = en.WriteUint64(z.ObjVersions[za0002])
			if err != nil {
				err = msgp.WrapError(err, "ObjVersions", za0002)
				return
			}
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// write "ats"
			err = en.Append(0xa3, 0x61, 0x74, 0x73)
			if err != nil {
				return
			}
			if z.AllTierStats == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// map header, size 1
				// write "ts"
				err = en.Append(0x81, 0xa2, 0x74, 0x73)
				if err != nil {
					return
				}
				err = en.WriteMapHeader(uint32(len(z.AllTierStats.Tiers)))
				if err != nil {
					err = msgp.WrapError(err, "AllTierStats", "Tiers")
					return
				}
				for za0003, za0004 := range z.AllTierStats.Tiers {
					err = en.WriteString(za0003)
					if err != nil {
						err = msgp.WrapError(err, "AllTierStats", "Tiers")
						return
					}
					// map header, size 3
					// write "ts"
					err = en.Append(0x83, 0xa2, 0x74, 0x73)
					if err != nil {
						return
					}
					err = en.WriteUint64(za0004.TotalSize)
					if err != nil {
						err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "TotalSize")
						return
					}
					// write "nv"
					err = en.Append(0xa2, 0x6e, 0x76)
					if err != nil {
						return
					}
					err = en.WriteInt(za0004.NumVersions)
					if err != nil {
						err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumVersions")
						return
					}
					// write "no"
					err = en.Append(0xa2, 0x6e, 0x6f)
					if err != nil {
						return
					}
					err = en.WriteInt(za0004.NumObjects)
					if err != nil {
						err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumObjects")
						return
					}
				}
			}
		}
		// write "c"
		err = en.Append(0xa1, 0x63)
		if err != nil {
			return
		}
		err = en.WriteBool(z.Compacted)
		if err != nil {
			err = msgp.WrapError(err, "Compacted")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *dataUsageEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(9)
	var zb0001Mask uint16 /* 9 bits */
	_ = zb0001Mask
	if z.AllTierStats == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "ch"
		o = append(o, 0xa2, 0x63, 0x68)
		o, err = z.Children.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Children")
			return
		}
		// string "sz"
		o = append(o, 0xa2, 0x73, 0x7a)
		o = msgp.AppendInt64(o, z.Size)
		// string "os"
		o = append(o, 0xa2, 0x6f, 0x73)
		o = msgp.AppendUint64(o, z.Objects)
		// string "vs"
		o = append(o, 0xa2, 0x76, 0x73)
		o = msgp.AppendUint64(o, z.Versions)
		// string "dms"
		o = append(o, 0xa3, 0x64, 0x6d, 0x73)
		o = msgp.AppendUint64(o, z.DeleteMarkers)
		// string "szs"
		o = append(o, 0xa3, 0x73, 0x7a, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(dataUsageBucketLen))
		for za0001 := range z.ObjSizes {
			o = msgp.AppendUint64(o, z.ObjSizes[za0001])
		}
		// string "vh"
		o = append(o, 0xa2, 0x76, 0x68)
		o = msgp.AppendArrayHeader(o, uint32(dataUsageVersionLen))
		for za0002 := range z.ObjVersions {
			o = msgp.AppendUint64(o, z.ObjVersions[za0002])
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// string "ats"
			o = append(o, 0xa3, 0x61, 0x74, 0x73)
			if z.AllTierStats == nil {
				o = msgp.AppendNil(o)
			} else {
				// map header, size 1
				// string "ts"
				o = append(o, 0x81, 0xa2, 0x74, 0x73)
				o = msgp.AppendMapHeader(o, uint32(len(z.AllTierStats.Tiers)))
				for za0003, za0004 := range z.AllTierStats.Tiers {
					o = msgp.AppendString(o, za0003)
					// map header, size 3
					// string "ts"
					o = append(o, 0x83, 0xa2, 0x74, 0x73)
					o = msgp.AppendUint64(o, za0004.TotalSize)
					// string "nv"
					o = append(o, 0xa2, 0x6e, 0x76)
					o = msgp.AppendInt(o, za0004.NumVersions)
					// string "no"
					o = append(o, 0xa2, 0x6e, 0x6f)
					o = msgp.AppendInt(o, za0004.NumObjects)
				}
			}
		}
		// string "c"
		o = append(o, 0xa1, 0x63)
		o = msgp.AppendBool(o, z.Compacted)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ch":
			bts, err = z.Children.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
		case "sz":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "os":
			z.Objects, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
		case "vs":
			z.Versions, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Versions")
				return
			}
		case "dms":
			z.DeleteMarkers, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkers")
				return
			}
		case "szs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjSizes")
				return
			}
			if zb0002 != uint32(dataUsageBucketLen) {
				err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
				return
			}
			for za0001 := range z.ObjSizes {
				z.ObjSizes[za0001], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ObjSizes", za0001)
					return
				}
			}
		case "vh":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjVersions")
				return
			}
			if zb0003 != uint32(dataUsageVersionLen) {
				err = msgp.ArrayError{Wanted: uint32(dataUsageVersionLen), Got: zb0003}
				return
			}
			for za0002 := range z.ObjVersions {
				z.ObjVersions[za0002], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ObjVersions", za0002)
					return
				}
			}
		case "ats":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AllTierStats = nil
			} else {
				if z.AllTierStats == nil {
					z.AllTierStats = new(allTierStats)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AllTierStats")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "AllTierStats")
						return
					}
					switch msgp.UnsafeString(field) {
					case "ts":
						var zb0005 uint32
						zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "AllTierStats", "Tiers")
							return
						}
						if z.AllTierStats.Tiers == nil {
							z.AllTierStats.Tiers = make(map[string]tierStats, zb0005)
						} else if len(z.AllTierStats.Tiers) > 0 {
							for key := range z.AllTierStats.Tiers {
								delete(z.AllTierStats.Tiers, key)
							}
						}
						for zb0005 > 0 {
							var za0003 string
							var za0004 tierStats
							zb0005--
							za0003, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "AllTierStats", "Tiers")
								return
							}
							var zb0006 uint32
							zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
								return
							}
							for zb0006 > 0 {
								zb0006--
								field, bts, err = msgp.ReadMapKeyZC(bts)
								if err != nil {
									err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
									return
								}
								switch msgp.UnsafeString(field) {
								case "ts":
									za0004.TotalSize, bts, err = msgp.ReadUint64Bytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "TotalSize")
										return
									}
								case "nv":
									za0004.NumVersions, bts, err = msgp.ReadIntBytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumVersions")
										return
									}
								case "no":
									za0004.NumObjects, bts, err = msgp.ReadIntBytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumObjects")
										return
									}
								default:
									bts, err = msgp.Skip(bts)
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
										return
									}
								}
							}
							z.AllTierStats.Tiers[za0003] = za0004
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "AllTierStats")
							return
						}
					}
				}
			}
			zb0001Mask |= 0x1
		case "c":
			z.Compacted, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Compacted")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if (zb0001Mask & 0x1) == 0 {
		z.AllTierStats = nil
	}

	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageEntry) Msgsize() (s int) {
	s = 1 + 3 + z.Children.Msgsize() + 3 + msgp.Int64Size + 3 + msgp.Uint64Size + 3 + msgp.Uint64Size + 4 + msgp.Uint64Size + 4 + msgp.ArrayHeaderSize + (dataUsageBucketLen * (msgp.Uint64Size)) + 3 + msgp.ArrayHeaderSize + (dataUsageVersionLen * (msgp.Uint64Size)) + 4
	if z.AllTierStats == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 3 + msgp.MapHeaderSize
		if z.AllTierStats.Tiers != nil {
			for za0003, za0004 := range z.AllTierStats.Tiers {
				_ = za0004
				s += msgp.StringPrefixSize + len(za0003) + 1 + 3 + msgp.Uint64Size + 3 + msgp.IntSize + 3 + msgp.IntSize
			}
		}
	}
	s += 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageEntryV2) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Size, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	err = z.Children.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageEntryV2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Size, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	bts, err = z.Children.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageEntryV2) Msgsize() (s int) {
	s = 1 + msgp.Int64Size + msgp.Uint64Size + msgp.ArrayHeaderSize + (dataUsageBucketLen * (msgp.Uint64Size)) + z.Children.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageEntryV3) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Size, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	err = z.Children.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageEntryV3) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Size, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	bts, err = z.Children.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageEntryV3) Msgsize() (s int) {
	s = 1 + msgp.Int64Size + msgp.Uint64Size + msgp.ArrayHeaderSize + (dataUsageBucketLen * (msgp.Uint64Size)) + z.Children.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageEntryV4) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	err = z.Children.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	z.Size, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageEntryV4) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	bts, err = z.Children.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	z.Size, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageEntryV4) Msgsize() (s int) {
	s = 1 + z.Children.Msgsize() + msgp.Int64Size + msgp.Uint64Size + msgp.ArrayHeaderSize + (dataUsageBucketLen * (msgp.Uint64Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageEntryV5) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	err = z.Children.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	z.Size, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	z.Versions, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Versions")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	z.Compacted, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Compacted")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageEntryV5) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	bts, err = z.Children.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	z.Size, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	z.Versions, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Versions")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	z.Compacted, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Compacted")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageEntryV5) Msgsize() (s int) {
	s = 1 + z.Children.Msgsize() + msgp.Int64Size + msgp.Uint64Size + msgp.Uint64Size + msgp.ArrayHeaderSize + (dataUsageBucketLen * (msgp.Uint64Size)) + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageEntryV6) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	err = z.Children.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	z.Size, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	z.Versions, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Versions")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	z.Compacted, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Compacted")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageEntryV6) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	bts, err = z.Children.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	z.Size, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	z.Objects, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	z.Versions, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Versions")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ObjSizes")
		return
	}
	if zb0002 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0002}
		return
	}
	for za0001 := range z.ObjSizes {
		z.ObjSizes[za0001], bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ObjSizes", za0001)
			return
		}
	}
	z.Compacted, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Compacted")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageEntryV6) Msgsize() (s int) {
	s = 1 + z.Children.Msgsize() + msgp.Int64Size + msgp.Uint64Size + msgp.Uint64Size + msgp.ArrayHeaderSize + (dataUsageBucketLen * (msgp.Uint64Size)) + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageEntryV7) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ch":
			err = z.Children.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
		case "sz":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "os":
			z.Objects, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
		case "vs":
			z.Versions, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Versions")
				return
			}
		case "dms":
			z.DeleteMarkers, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkers")
				return
			}
		case "szs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ObjSizes")
				return
			}
			if zb0002 != uint32(dataUsageBucketLenV1) {
				err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLenV1), Got: zb0002}
				return
			}
			for za0001 := range z.ObjSizes {
				z.ObjSizes[za0001], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "ObjSizes", za0001)
					return
				}
			}
		case "vh":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ObjVersions")
				return
			}
			if zb0003 != uint32(dataUsageVersionLen) {
				err = msgp.ArrayError{Wanted: uint32(dataUsageVersionLen), Got: zb0003}
				return
			}
			for za0002 := range z.ObjVersions {
				z.ObjVersions[za0002], err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "ObjVersions", za0002)
					return
				}
			}
		case "ats":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AllTierStats")
					return
				}
				z.AllTierStats = nil
			} else {
				if z.AllTierStats == nil {
					z.AllTierStats = new(allTierStats)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "AllTierStats")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "AllTierStats")
						return
					}
					switch msgp.UnsafeString(field) {
					case "ts":
						var zb0005 uint32
						zb0005, err = dc.ReadMapHeader()
						if err != nil {
							err = msgp.WrapError(err, "AllTierStats", "Tiers")
							return
						}
						if z.AllTierStats.Tiers == nil {
							z.AllTierStats.Tiers = make(map[string]tierStats, zb0005)
						} else if len(z.AllTierStats.Tiers) > 0 {
							for key := range z.AllTierStats.Tiers {
								delete(z.AllTierStats.Tiers, key)
							}
						}
						for zb0005 > 0 {
							zb0005--
							var za0003 string
							var za0004 tierStats
							za0003, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "AllTierStats", "Tiers")
								return
							}
							var zb0006 uint32
							zb0006, err = dc.ReadMapHeader()
							if err != nil {
								err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
								return
							}
							for zb0006 > 0 {
								zb0006--
								field, err = dc.ReadMapKeyPtr()
								if err != nil {
									err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
									return
								}
								switch msgp.UnsafeString(field) {
								case "ts":
									za0004.TotalSize, err = dc.ReadUint64()
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "TotalSize")
										return
									}
								case "nv":
									za0004.NumVersions, err = dc.ReadInt()
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumVersions")
										return
									}
								case "no":
									za0004.NumObjects, err = dc.ReadInt()
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumObjects")
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
										return
									}
								}
							}
							z.AllTierStats.Tiers[za0003] = za0004
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "AllTierStats")
							return
						}
					}
				}
			}
			zb0001Mask |= 0x1
		case "c":
			z.Compacted, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Compacted")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if (zb0001Mask & 0x1) == 0 {
		z.AllTierStats = nil
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageEntryV7) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ch":
			bts, err = z.Children.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
		case "sz":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "os":
			z.Objects, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
		case "vs":
			z.Versions, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Versions")
				return
			}
		case "dms":
			z.DeleteMarkers, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkers")
				return
			}
		case "szs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjSizes")
				return
			}
			if zb0002 != uint32(dataUsageBucketLenV1) {
				err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLenV1), Got: zb0002}
				return
			}
			for za0001 := range z.ObjSizes {
				z.ObjSizes[za0001], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ObjSizes", za0001)
					return
				}
			}
		case "vh":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjVersions")
				return
			}
			if zb0003 != uint32(dataUsageVersionLen) {
				err = msgp.ArrayError{Wanted: uint32(dataUsageVersionLen), Got: zb0003}
				return
			}
			for za0002 := range z.ObjVersions {
				z.ObjVersions[za0002], bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ObjVersions", za0002)
					return
				}
			}
		case "ats":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AllTierStats = nil
			} else {
				if z.AllTierStats == nil {
					z.AllTierStats = new(allTierStats)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AllTierStats")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "AllTierStats")
						return
					}
					switch msgp.UnsafeString(field) {
					case "ts":
						var zb0005 uint32
						zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "AllTierStats", "Tiers")
							return
						}
						if z.AllTierStats.Tiers == nil {
							z.AllTierStats.Tiers = make(map[string]tierStats, zb0005)
						} else if len(z.AllTierStats.Tiers) > 0 {
							for key := range z.AllTierStats.Tiers {
								delete(z.AllTierStats.Tiers, key)
							}
						}
						for zb0005 > 0 {
							var za0003 string
							var za0004 tierStats
							zb0005--
							za0003, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "AllTierStats", "Tiers")
								return
							}
							var zb0006 uint32
							zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
								return
							}
							for zb0006 > 0 {
								zb0006--
								field, bts, err = msgp.ReadMapKeyZC(bts)
								if err != nil {
									err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
									return
								}
								switch msgp.UnsafeString(field) {
								case "ts":
									za0004.TotalSize, bts, err = msgp.ReadUint64Bytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "TotalSize")
										return
									}
								case "nv":
									za0004.NumVersions, bts, err = msgp.ReadIntBytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumVersions")
										return
									}
								case "no":
									za0004.NumObjects, bts, err = msgp.ReadIntBytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003, "NumObjects")
										return
									}
								default:
									bts, err = msgp.Skip(bts)
									if err != nil {
										err = msgp.WrapError(err, "AllTierStats", "Tiers", za0003)
										return
									}
								}
							}
							z.AllTierStats.Tiers[za0003] = za0004
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "AllTierStats")
							return
						}
					}
				}
			}
			zb0001Mask |= 0x1
		case "c":
			z.Compacted, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Compacted")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if (zb0001Mask & 0x1) == 0 {
		z.AllTierStats = nil
	}

	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *dataUsageEntryV7) Msgsize() (s int) {
	s = 1 + 3 + z.Children.Msgsize() + 3 + msgp.Int64Size + 3 + msgp.Uint64Size + 3 + msgp.Uint64Size + 4 + msgp.Uint64Size + 4 + msgp.ArrayHeaderSize + (dataUsageBucketLenV1 * (msgp.Uint64Size)) + 3 + msgp.ArrayHeaderSize + (dataUsageVersionLen * (msgp.Uint64Size)) + 4
	if z.AllTierStats == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 3 + msgp.MapHeaderSize
		if z.AllTierStats.Tiers != nil {
			for za0003, za0004 := range z.AllTierStats.Tiers {
				_ = za0004
				s += msgp.StringPrefixSize + len(za0003) + 1 + 3 + msgp.Uint64Size + 3 + msgp.IntSize + 3 + msgp.IntSize
			}
		}
	}
	s += 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *dataUsageHash) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = dataUsageHash(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z dataUsageHash) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z dataUsageHash) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *dataUsageHash) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = dataUsageHash(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z dataUsageHash) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *sizeHistogram) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *sizeHistogram) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(dataUsageBucketLen))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for za0001 := range z {
		err = en.WriteUint64(z[za0001])
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *sizeHistogram) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(dataUsageBucketLen))
	for za0001 := range z {
		o = msgp.AppendUint64(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *sizeHistogram) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(dataUsageBucketLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLen), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *sizeHistogram) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (dataUsageBucketLen * (msgp.Uint64Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *sizeHistogramV1) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(dataUsageBucketLenV1) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLenV1), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *sizeHistogramV1) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(dataUsageBucketLenV1))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for za0001 := range z {
		err = en.WriteUint64(z[za0001])
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *sizeHistogramV1) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(dataUsageBucketLenV1))
	for za0001 := range z {
		o = msgp.AppendUint64(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *sizeHistogramV1) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(dataUsageBucketLenV1) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageBucketLenV1), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *sizeHistogramV1) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (dataUsageBucketLenV1 * (msgp.Uint64Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *tierStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ts":
			z.TotalSize, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TotalSize")
				return
			}
		case "nv":
			z.NumVersions, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NumVersions")
				return
			}
		case "no":
			z.NumObjects, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NumObjects")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z tierStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ts"
	err = en.Append(0x83, 0xa2, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TotalSize)
	if err != nil {
		err = msgp.WrapError(err, "TotalSize")
		return
	}
	// write "nv"
	err = en.Append(0xa2, 0x6e, 0x76)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NumVersions)
	if err != nil {
		err = msgp.WrapError(err, "NumVersions")
		return
	}
	// write "no"
	err = en.Append(0xa2, 0x6e, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NumObjects)
	if err != nil {
		err = msgp.WrapError(err, "NumObjects")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z tierStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ts"
	o = append(o, 0x83, 0xa2, 0x74, 0x73)
	o = msgp.AppendUint64(o, z.TotalSize)
	// string "nv"
	o = append(o, 0xa2, 0x6e, 0x76)
	o = msgp.AppendInt(o, z.NumVersions)
	// string "no"
	o = append(o, 0xa2, 0x6e, 0x6f)
	o = msgp.AppendInt(o, z.NumObjects)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *tierStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ts":
			z.TotalSize, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalSize")
				return
			}
		case "nv":
			z.NumVersions, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumVersions")
				return
			}
		case "no":
			z.NumObjects, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumObjects")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z tierStats) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint64Size + 3 + msgp.IntSize + 3 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *versionsHistogram) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(dataUsageVersionLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageVersionLen), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *versionsHistogram) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(dataUsageVersionLen))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for za0001 := range z {
		err = en.WriteUint64(z[za0001])
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *versionsHistogram) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(dataUsageVersionLen))
	for za0001 := range z {
		o = msgp.AppendUint64(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *versionsHistogram) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(dataUsageVersionLen) {
		err = msgp.ArrayError{Wanted: uint32(dataUsageVersionLen), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *versionsHistogram) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (dataUsageVersionLen * (msgp.Uint64Size))
	return
}
