// Code generated by github.com/tinylib/msgp DO NOT EDIT.

package cmd

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *listPathOptions) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Bucket":
			z.Bucket, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
		case "BaseDir":
			z.BaseDir, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BaseDir")
				return
			}
		case "Prefix":
			z.Prefix, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Prefix")
				return
			}
		case "FilterPrefix":
			z.FilterPrefix, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FilterPrefix")
				return
			}
		case "Marker":
			z.Marker, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Marker")
				return
			}
		case "Limit":
			z.Limit, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		case "AskDisks":
			z.AskDisks, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AskDisks")
				return
			}
		case "InclDeleted":
			z.InclDeleted, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "InclDeleted")
				return
			}
		case "Recursive":
			z.Recursive, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Recursive")
				return
			}
		case "Separator":
			z.Separator, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Separator")
				return
			}
		case "Create":
			z.Create, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Create")
				return
			}
		case "IncludeDirectories":
			z.IncludeDirectories, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IncludeDirectories")
				return
			}
		case "Transient":
			z.Transient, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Transient")
				return
			}
		case "Versioned":
			z.Versioned, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Versioned")
				return
			}
		case "V1":
			z.V1, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "V1")
				return
			}
		case "StopDiskAtLimit":
			z.StopDiskAtLimit, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "StopDiskAtLimit")
				return
			}
		case "pool":
			z.pool, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "pool")
				return
			}
		case "set":
			z.set, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "set")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *listPathOptions) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 19
	// write "ID"
	err = en.Append(0xde, 0x0, 0x13, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Bucket"
	err = en.Append(0xa6, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bucket)
	if err != nil {
		err = msgp.WrapError(err, "Bucket")
		return
	}
	// write "BaseDir"
	err = en.Append(0xa7, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.BaseDir)
	if err != nil {
		err = msgp.WrapError(err, "BaseDir")
		return
	}
	// write "Prefix"
	err = en.Append(0xa6, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78)
	if err != nil {
		return
	}
	err = en.WriteString(z.Prefix)
	if err != nil {
		err = msgp.WrapError(err, "Prefix")
		return
	}
	// write "FilterPrefix"
	err = en.Append(0xac, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78)
	if err != nil {
		return
	}
	err = en.WriteString(z.FilterPrefix)
	if err != nil {
		err = msgp.WrapError(err, "FilterPrefix")
		return
	}
	// write "Marker"
	err = en.Append(0xa6, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Marker)
	if err != nil {
		err = msgp.WrapError(err, "Marker")
		return
	}
	// write "Limit"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Limit)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	// write "AskDisks"
	err = en.Append(0xa8, 0x41, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.AskDisks)
	if err != nil {
		err = msgp.WrapError(err, "AskDisks")
		return
	}
	// write "InclDeleted"
	err = en.Append(0xab, 0x49, 0x6e, 0x63, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.InclDeleted)
	if err != nil {
		err = msgp.WrapError(err, "InclDeleted")
		return
	}
	// write "Recursive"
	err = en.Append(0xa9, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Recursive)
	if err != nil {
		err = msgp.WrapError(err, "Recursive")
		return
	}
	// write "Separator"
	err = en.Append(0xa9, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Separator)
	if err != nil {
		err = msgp.WrapError(err, "Separator")
		return
	}
	// write "Create"
	err = en.Append(0xa6, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Create)
	if err != nil {
		err = msgp.WrapError(err, "Create")
		return
	}
	// write "IncludeDirectories"
	err = en.Append(0xb2, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IncludeDirectories)
	if err != nil {
		err = msgp.WrapError(err, "IncludeDirectories")
		return
	}
	// write "Transient"
	err = en.Append(0xa9, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Transient)
	if err != nil {
		err = msgp.WrapError(err, "Transient")
		return
	}
	// write "Versioned"
	err = en.Append(0xa9, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Versioned)
	if err != nil {
		err = msgp.WrapError(err, "Versioned")
		return
	}
	// write "V1"
	err = en.Append(0xa2, 0x56, 0x31)
	if err != nil {
		return
	}
	err = en.WriteBool(z.V1)
	if err != nil {
		err = msgp.WrapError(err, "V1")
		return
	}
	// write "StopDiskAtLimit"
	err = en.Append(0xaf, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.StopDiskAtLimit)
	if err != nil {
		err = msgp.WrapError(err, "StopDiskAtLimit")
		return
	}
	// write "pool"
	err = en.Append(0xa4, 0x70, 0x6f, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt(z.pool)
	if err != nil {
		err = msgp.WrapError(err, "pool")
		return
	}
	// write "set"
	err = en.Append(0xa3, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.set)
	if err != nil {
		err = msgp.WrapError(err, "set")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *listPathOptions) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 19
	// string "ID"
	o = append(o, 0xde, 0x0, 0x13, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "Bucket"
	o = append(o, 0xa6, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	o = msgp.AppendString(o, z.Bucket)
	// string "BaseDir"
	o = append(o, 0xa7, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72)
	o = msgp.AppendString(o, z.BaseDir)
	// string "Prefix"
	o = append(o, 0xa6, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78)
	o = msgp.AppendString(o, z.Prefix)
	// string "FilterPrefix"
	o = append(o, 0xac, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78)
	o = msgp.AppendString(o, z.FilterPrefix)
	// string "Marker"
	o = append(o, 0xa6, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72)
	o = msgp.AppendString(o, z.Marker)
	// string "Limit"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendInt(o, z.Limit)
	// string "AskDisks"
	o = append(o, 0xa8, 0x41, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x73)
	o = msgp.AppendString(o, z.AskDisks)
	// string "InclDeleted"
	o = append(o, 0xab, 0x49, 0x6e, 0x63, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
	o = msgp.AppendBool(o, z.InclDeleted)
	// string "Recursive"
	o = append(o, 0xa9, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65)
	o = msgp.AppendBool(o, z.Recursive)
	// string "Separator"
	o = append(o, 0xa9, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Separator)
	// string "Create"
	o = append(o, 0xa6, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65)
	o = msgp.AppendBool(o, z.Create)
	// string "IncludeDirectories"
	o = append(o, 0xb2, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73)
	o = msgp.AppendBool(o, z.IncludeDirectories)
	// string "Transient"
	o = append(o, 0xa9, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.Transient)
	// string "Versioned"
	o = append(o, 0xa9, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Versioned)
	// string "V1"
	o = append(o, 0xa2, 0x56, 0x31)
	o = msgp.AppendBool(o, z.V1)
	// string "StopDiskAtLimit"
	o = append(o, 0xaf, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendBool(o, z.StopDiskAtLimit)
	// string "pool"
	o = append(o, 0xa4, 0x70, 0x6f, 0x6f, 0x6c)
	o = msgp.AppendInt(o, z.pool)
	// string "set"
	o = append(o, 0xa3, 0x73, 0x65, 0x74)
	o = msgp.AppendInt(o, z.set)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *listPathOptions) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Bucket":
			z.Bucket, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
		case "BaseDir":
			z.BaseDir, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseDir")
				return
			}
		case "Prefix":
			z.Prefix, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Prefix")
				return
			}
		case "FilterPrefix":
			z.FilterPrefix, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FilterPrefix")
				return
			}
		case "Marker":
			z.Marker, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Marker")
				return
			}
		case "Limit":
			z.Limit, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		case "AskDisks":
			z.AskDisks, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AskDisks")
				return
			}
		case "InclDeleted":
			z.InclDeleted, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InclDeleted")
				return
			}
		case "Recursive":
			z.Recursive, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Recursive")
				return
			}
		case "Separator":
			z.Separator, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Separator")
				return
			}
		case "Create":
			z.Create, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Create")
				return
			}
		case "IncludeDirectories":
			z.IncludeDirectories, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IncludeDirectories")
				return
			}
		case "Transient":
			z.Transient, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Transient")
				return
			}
		case "Versioned":
			z.Versioned, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Versioned")
				return
			}
		case "V1":
			z.V1, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "V1")
				return
			}
		case "StopDiskAtLimit":
			z.StopDiskAtLimit, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StopDiskAtLimit")
				return
			}
		case "pool":
			z.pool, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "pool")
				return
			}
		case "set":
			z.set, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "set")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *listPathOptions) Msgsize() (s int) {
	s = 3 + 3 + msgp.StringPrefixSize + len(z.ID) + 7 + msgp.StringPrefixSize + len(z.Bucket) + 8 + msgp.StringPrefixSize + len(z.BaseDir) + 7 + msgp.StringPrefixSize + len(z.Prefix) + 13 + msgp.StringPrefixSize + len(z.FilterPrefix) + 7 + msgp.StringPrefixSize + len(z.Marker) + 6 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.AskDisks) + 12 + msgp.BoolSize + 10 + msgp.BoolSize + 10 + msgp.StringPrefixSize + len(z.Separator) + 7 + msgp.BoolSize + 19 + msgp.BoolSize + 10 + msgp.BoolSize + 10 + msgp.BoolSize + 3 + msgp.BoolSize + 16 + msgp.BoolSize + 5 + msgp.IntSize + 4 + msgp.IntSize
	return
}
